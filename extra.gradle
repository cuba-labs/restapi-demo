/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */
buildscript {
    repositories {
        mavenLocal()
        jcenter()

        /*
         * maven { url "https://dl.bintray.com/cuba-platform/main" }
         *
         * TODO: temprorary - use Bintray later
         */
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username 'cuba'
                password 'cuba123'
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

apply(plugin: 'cuba')

String demoToken = null
if (project.rootProject.hasProperty('demoToken')) {
    demoToken = project.rootProject['demoToken']
} else if (project.rootProject.hasProperty('demoBranch')) {
    demoToken = ext.cubaVersion.replace('.', '').replace("-SNAPSHOT", "")
}

def coreModule = project(':app-core')
def webModule = project(':app-web')
def portalModule = project(':app-portal')

def coreJarNames = ['cuba-global', 'cuba-core',
                    'reports-global', 'reports-core',
                    'bpm-global', 'bpm-core',
                    'app-global', 'app-core']

configure(coreModule) {

    assembleDbScripts { moduleAlias = '30-refapp' }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = 'refapp_test_6'
        dbUser = 'root'
        dbPassword = 'root'
    }

    task createDemoDb(dependsOn: assembleDbScripts, description: 'Creates local Postgres database for com', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = ('refapp_demo' + (demoToken != null ? '_' + demoToken : ''))
        dbUser = 'root'
        dbPassword = 'root'
    }

    task updateTestDb(dependsOn: assembleDbScripts, description: 'Updates local Postgres database for tests', type: CubaDbUpdate) {
        dbms = 'postgres'
        dbName = 'refapp_test_6'
        dbUser = 'root'
        dbPassword = 'root'
    }


    // HSQLDB stuff

    def hsqlDbName = 'cubadb'

    task startHsqlDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = hsqlDbName
    }

    task stopHsqlDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = hsqlDbName
    }

    task killHsqlDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task removeHsqlDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task createHsqlDb(dependsOn: assembleDbScripts, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateHsqlDb(dependsOn: assembleDbScripts, description: 'Updates local HSQL database', type: CubaDbUpdate) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }

}

configure(portalModule) {

    task funcTest(dependsOn: ':prepareTest', description: 'Run functional tests', type: Test) {
        scanForTestClasses = false
        includes = ['**/*FT.class']
        workingDir = "$projectDir/../../"
    }

}


configure(webModule) {
    task testStart(type: Test, dependsOn: testClasses) {
        include("com/haulmont/rest/demo/DeploymentTest.class")
        systemProperties = System.getProperties()
    }
}

task clearConf(description: 'Clears conf directory') {
    doLast {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }
}

task stopTomcatAfterTest(type: CubaStopTomcat, description: 'Stops Tomcat after functional tests') {
    tomcatRootDir = cuba.tomcat.dir
}

task enableRemoteJmx() {
    doLast {
        project.file("${cuba.tomcat.dir}/bin/setenv.bat").text = '''
set CATALINA_OPTS=-Xmx512m -Dfile.encoding=UTF-8

set CATALINA_OPTS=%CATALINA_OPTS% -Dlogback.configurationFile=../conf/logback.xml

set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote 
set CATALINA_OPTS=%CATALINA_OPTS% -Djava.rmi.server.hostname=localhost 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.port=7777 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.ssl=false 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.authenticate=false

set JPDA_OPTS=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
'''

        project.file("${cuba.tomcat.dir}/bin/setenv.sh").text = '''
CATALINA_OPTS="-Xmx512m -Dfile.encoding=UTF-8"

CATALINA_OPTS="$CATALINA_OPTS -Dlogback.configurationFile=../conf/logback.xml"

CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote"

CATALINA_OPTS="$CATALINA_OPTS \\
-Djava.rmi.server.hostname=localhost \\
-Dcom.sun.management.jmxremote.port=7777 \\
-Dcom.sun.management.jmxremote.ssl=false \\
-Dcom.sun.management.jmxremote.authenticate=false"

JPDA_OPTS="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"
'''
    }
}

task enableTestProperties() {
    doLast {
        project.file("${cuba.tomcat.dir}/conf/app-core/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-core/local.app.properties").text = '''
refapp.core.embeddedLdap.startTcpServer = true
'''
        project.file("${cuba.tomcat.dir}/conf/app-portal/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-portal/local.app.properties").text = '''
cuba.rest.ldap.enabled = true
cuba.rest.ldap.urls = ldap://localhost:10389
cuba.rest.ldap.base = dc=example,dc=com
cuba.rest.ldap.user = cn=refapp,dc=example,dc=com
cuba.rest.ldap.password = refapp
cuba.rest.ldap.userLoginField = cn
'''
    }
}

task prepareTest(dependsOn: [dropTomcat, coreModule.assemble, webModule.assemble, portalModule.assemble],
        description: 'Prepare server for tests') {
    doLast {
        // Setup
        setupTomcat.execute()

        // Test configuration
        enableTestProperties.execute()
        enableRemoteJmx.execute()

        // Deploy
        coreModule.deploy.execute()
        webModule.deploy.execute()
        portalModule.deploy.execute()
        // Create DB
        coreModule.createDb.execute()
        // Start server
        start.execute()

        ant.waitfor(maxwait: 30, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            http(url: "http://localhost:8080/app")
        }
        // Delete out directory
        File dir = new File("$projectDir/tests/ui/out")
        if (dir.exists()) {
            project.delete(dir)
        }
    }
}

/* ============= Cluster testing =============== */

def tomcat1Dir = cuba.tomcat.dir + '1'
def tomcat2Dir = cuba.tomcat.dir + '2'

task setupTomcat1(type: CubaSetupTomcat) {
    tomcatRootDir = tomcat1Dir
}

task setupTomcat2(type: CubaSetupTomcat) {
    tomcatRootDir = tomcat2Dir
}

task dropTomcat1(type: CubaDropTomcat) {
    tomcatRootDir = tomcat1Dir
    listeningPort = 18787
}

task dropTomcat2(type: CubaDropTomcat) {
    tomcatRootDir = tomcat2Dir
    listeningPort = 28787
}

task dropTomcatDemo(type: CubaDropTomcat) {
    tomcatRootDir = cuba.tomcat.dir
    listeningPort = Integer.valueOf('97' + (demoToken != null ? demoToken : '00'))
}

task startTomcat1(type: CubaStartTomcat) {
    tomcatRootDir = tomcat1Dir
}

task startTomcat2(type: CubaStartTomcat) {
    tomcatRootDir = tomcat2Dir
}

configure(coreModule) {
    task deploy1(dependsOn: assemble, type: CubaDeployment) {
        tomcatRootDir = tomcat1Dir
        appName = 'app-core'
        jarNames = coreJarNames
    }
}

configure(webModule) {
    task deploy1(dependsOn: assemble, type: CubaDeployment) {
        tomcatRootDir = tomcat1Dir
        appName = 'app'
        jarNames = ['app-global', 'app-web']
    }
}

task buildWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    singleWar = false
    includeJdbcDriver = true
    includeContextXml = true
}

task buildSingleWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    webXml = "${project(':app-web').projectDir}/web/WEB-INF/single-app-web.xml"
    coreContextXmlPath = 'modules/core/web/META-INF/single-war-context.xml'
    includeJdbcDriver = true
    includeContextXml = true
}

task buildUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    appName = 'app'
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task buildSingleUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    singleJar = true
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task copyWarToTomcat(type: Copy) {
    from "${project.buildDir}/distributions/war"
    include "*.war"
    into "${cuba.tomcat.dir}/webapps"
}

